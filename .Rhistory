m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() {x}
setmean <- function(mean) {m <<- mean}
getmean <- function() {m}
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
testvector<-as.numeric(1:10000000)
y<-makeVector(testvector)
cachemean(y)
testvector<-as.numeric(1:8)
y<-makeVector(testvector)
cachemean(y)
get
get()
x<<-3
get()
get(3)
getmean()
setmean <- function(mean) {m <<- mean}
setmean(3)
getmean <- function() {m}
getmean
getmean(3)
x$??
??x$
x<-(1:100)
x$1
x$(1)
y<-1:5
x$y
y$x
m <- NULL
print(m)
set <- function(y) {
x <<- y
m <<- 3
print(m)
}
set()
set(0)
print(m)
m <- NULL
print(m)
set <- function(y=0) {
x <<- y
m <<- 3
print(m)
}
print(m)
mean<-function(){x+y}
x<-3
y<-4
mean
mean()
mean(5,6)
clear
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y=0) {
x <<- y
m <<- 3
}
get <- function() {x}
setmean <- function(mean) {m <<- mean}
getmean <- function() {m}
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
a$get()
a<-makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y=0) {
x <<- y
m <<- 3
}
get <- function() {x}
setmean <- function(mean) {m <<- mean}
getmean <- function() {m}
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
a$get()
x<-3
function(){x<-4}
check<-function(){x<-4}
check()
check<-function(){x<-4
print(x)}
check()
x<-3
check()
x<<-3
check()
check<-function(){
print(x)}
check()
x<-2
check()
crazy <- function() {
x <<- 3.14                   # variable x in the containing environment (global in this case) is updated to be 3.14
print(x)                        # since no local variable 'x' exists within function 'crazy' R searches the containing environments
{ print(x);                     # this is to demonstrate the function, not a code block, is the smallest environment in R
x <- 42; print(x)         # local variable 'x' is declared (created) and assigned the value 42; overrides the variable 'x' in
}                                  # the containing environment
print(x)                       # since local variable 'x' now exists within the function there is no need to search the containing
}                                   # environment (global in this case)
x<-0
crazy()
x
check<-function(){
x<<-10
print(x)}
x<5
x<-5
check()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y=0) {
x <<- y
m <<- 3
}
get <- function() {x}
setmean <- function(mean) {m <<- mean}
getmean <- function() {m}
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y=0) {
x <<- y
m <<- 3
}
get <- function() {x}
setmean <- function(mean) {m <<- mean}
getmean <- function() {m}
list(set = set, get = get,
setmean = setmean,
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y=0) {
x <<- y
m <<- 3
}
get <- function() {x}
setmean <- function(mean) {m <<- mean}
getmean <- function() {m}
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
m
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y=0) {
x <<- y
m <<- 3
}
print(m)
get <- function() {x}
setmean <- function(mean) {m <<- mean}
getmean <- function() {m}
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector()
y<_(1:5)
y<-(1:5)
makeVector(y)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y=0) {
x <<- y
m <<- 3
}
get <- function() {x}
setmean <- function(mean) {m <<- mean}
getmean <- function() {m}
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(y)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- 3
}
get <- function() {x}
setmean <- function(mean) {m <<- mean}
getmean <- function() {m}
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(y)
a<-makeVector(y)
a
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() {x}
setmean <- function(mean) {m <<- mean}
getmean <- function() {m}
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
a<-makeVector(y)
a<-makeVector(y)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() {x}
setmean <- function(mean) {m <<- mean}
getmean <- function() {m}
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
a
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() {x}
setmean <- function(mean) {m <<- mean}
getmean <- function() {m}
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector(y)
testvector<-as.numeric(1:10000000)
y<-makeVector(testvector)
y
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() {x}
setmean <- function(mean) {m <<- mean}
getmean <- function() {m}
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
y<-makeVector(testvector)
cachemean(y)
makeVector <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() {x}
setinverse <- function(inverse) {m <<- inverse}
getinverse <- function() {m}
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cachemean <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
testvector<-matrix(1:4, nrow=2, ncol=3)
testvector<-matrix(1:4, nrow=2, ncol=2)
testvector
y<-makeVector(testvector)
cachemean(y)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() {x}
setinverse <- function(inverse) {m <<- inverse}
getinverse <- function() {m}
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
testvector<-matrix(1:4, nrow=2, ncol=2)
y<-makeCacheMatrix(testvector)
cacheInverse(y)
cacheSolve(y)
cacheSolve(y)
library(datasets)
data(iris)
?iris
iris$Sepal.length
View(iris)
virginicasplit <-iris[virginica,]
virginicasplit <-iris["virginica",]
View(virginicasplit)
y<-iris$virginica
iris[virginica,]
virginica<-iris[,101:150]
virginica<-iris[9db36310050692671e034170ec2be0665d953046,]
virginica<-iris[101:150,]
View(virginica)
View(virginica)
mean<-mean(Sepal.length)
mean$Sepal.Length
Sepal.Length<-viriginica[,2]
Sepal.Length<-virginica[,2]
Sepal.Length<-virginica[,1]
mean<-mean(Sepal.Length)
apply(iris[,1:4],1,mean)
apply(iris[,1:4],2,mean)
library(datasets)
data(mtcars)
?mtcars
lapply(mtcars,mean)
sapply(mtcars,cyl,mean)
with(mtcards,tapply(mpg,cyl,mean))
with(mtcars,tapply(mpg,cyl,mean))
with(mtcars,tapply(hpyl,mean))
with(mtcars,tapply(hp,cyl,mean))
209.21429-82.63636
debug(ls)
ls
library(swirl)
swirl()
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package=lubridate)
today()
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label=TRUE)
now()
this_moment <- now()
this_moment
hour(this_moment)
my_date<-ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms(03:22:14)
hms("03:22:14"")
hms("03:22:14)
""
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 20, minutes = 27, seconds = 15)
this_moment
now("America/New_York")
nyc<-now("America/New_York")
nyc
nyc+days(2)
depart <- nyc+days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- nyc + hours(15) + minutes(50)
arrive <- depart + hours(15) + minutes(50)
?with_taz
?with_tz
arrive <- with_tz(arrive, tzone="Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tzone = "Singapore")
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long = new_interval(last_time, arrive)
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
library(nlme)
library(lattice)
xyplot(weight~Time | Diet, BodyWeight)
library(datasets)
data(airquality)
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality) + geom_smooth()
install.packages("caret")
install.packages("randomForest")
install.packages("rpart")
install.packages("rpart.plot")
install.packages("e1071")
sessionInfo()
install.packages("shiny")
install.packages("slidify")
install.packages("slidify")
install.packages("slidify")
install.packages("slidify")
install.packages("devtools")
sessionInfo()
string
strinr
library(stringer)
library(stringr)
sessionInfo()
install_github('slidify', 'ramnathv')
library(devtools)
install.packages("Rtools")
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
setwd("D:\\Dropbox\\Coursera\\Developing Data Products\\Shiny")
library(shiny)
install.package("shiny")
install.packages("shiny")
setwd("D:\\Dropbox\\Coursera\\Developing Data Products\\Shiny")
library(shiny)
runApp()
runApp()
install.packages("ggplot2")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("D:\\Dropbox\Coursera\\Developing Data Products\\Slidify\\Developing_Data_Products")
setwd("D:\\Dropbox\\Coursera\\Developing Data Products\\Slidify\\Developing_Data_Products")
list.files()
library(knitr)
library(slidify)
slidify('index.Rmd')
install.packages("~/R/win-library/3.1/stringr_0.6.2.tar.gz", repos = NULL, type = "source")
